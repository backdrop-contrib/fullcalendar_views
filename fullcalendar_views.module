<?php
/**
 * @file
 * Hooks and main code for the Fullcalendar Views NG module.
 */

/**
 * Implements hook_views_api().
 */
function fullcalendar_views_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'fullcalendar_views') . '/views',
  );
}

/**
 * Implements hook_autoload_info().
 */
function fullcalendar_views_autoload_info() {
  return array(
    'FullcalendarViewsDisplayFeed' => 'views/fullcalendar_views_display_feed.inc',
    'FullcalendarViewsStyleCalendar' => 'views/fullcalendar_views_style_calendar.inc',
    'FullcalendarViewsStyleJson' => 'views/fullcalendar_views_style_json.inc',
  );
}

/**
 * Implements template_preprocess_views_ui_view_preview_section().
 */
function fullcalendar_views_preprocess_views_ui_view_preview_section(&$variables) {
  $view = $variables['view'];
  $plugin = $view->display_handler->get_option('style_plugin');
  if ($plugin == 'fullcalendar_view') {
    $setup  = $view->style_plugin->options['calendar_setup'];
    if (!empty($setup['event_bg_color'])) {
      // Inject an inline style tag to allow direct color preview in the views
      // admin UI.
      $inline_style = '<style>:root{';
      $inline_style .= '--fc-event-bg-color:' . $setup['event_bg_color'] . ';';
      $inline_style .= '--fc-event-border-color:' . $setup['event_bg_color'] . ';';
      $inline_style .= '--fc-event-text-color:' . $setup['event_text_color'] . ';';
      $inline_style .= '}</style>';
      $variables['content'] .= $inline_style;
    }
  }
}

/**
 * Helper function to return supported field API types.
 *
 * @see FullcalendarViewsStyleCalendar::getDateFieldCandidates()
 * @see FullcalendarViewsStyleJson::getDateFieldCandidates()
 *
 * @return array<string>
 */
function fullcalendar_views_supported_field_types() {
  return array(
    'date',
    'datetime',
    'datestamp',
    'repeating_date',
    'resource_timeslot',
  );
}

/**
 * Helper function to sanitize CSS classes.
 *
 * @param string $input
 *   Rendered view field value.
 *
 * @return string
 *   Sanitized string usable as CSS class(es).
 */
function fullcalendar_views_sanitize_css($input) {
  $output = '';
  $classes = explode(' ', $input);
  foreach ($classes as $class) {
    $output .= ' ' . backdrop_clean_css_identifier($class);
  }
  return trim($output);
}

/**
 * Parse the various supported date field types into values FC can handle.
 *
 * @param array<mixed> $raw_values
 *   Raw views result values provided by get_field_value().
 * @param string $type
 *   The field type as defined in hook_field_info().
 * @param bool $date_only
 *   Whether this field should be handled without time.
 * @param array<mixed> $rendered_fields
 *   Array of rendered field values, usually empty at this point.
 *
 * @return void
 *
 * @see FullcalendarViewsStyleCalendar::renderRow()
 * @see FullcalendarViewsStyleJson::renderRow()
 */
function fullcalendar_views_parse_date_fields(array $raw_values, $type, $date_only, &$rendered_fields) {
  $increment_end = FALSE;
  // For date_only we need to increment, so the last day is inclusive.
  if ($date_only) {
    $increment_end = TRUE;
  }

  switch ($type) {
    case 'date':
    case 'datetime':
      $tz_db = $raw_values[0]['timezone_db'];
      $tz = $raw_values[0]['timezone'];
      $end = FALSE;

      $start = new BackdropDateTime($raw_values[0]['value'], $tz_db);
      if ($tz != $tz_db) {
        $start->setTimezone(new DateTimeZone($tz));
      }
      if (!empty($raw_values[0]['value2'])) {
        $end = new BackdropDateTime($raw_values[0]['value2'], $tz_db);
        if ($tz != $tz_db) {
          $end->setTimezone(new DateTimeZone($tz));
        }
        // End dates are exclusive in FC, so if two values are the same we have
        // to increment the end.
        if ($start == $end) {
          $increment_end = TRUE;
        }
        // Same as above, also with different dates.
        if (date_is_all_day($start->format('Y-m-d H:i:s'), $end->format('Y-m-d H:i:s'))) {
          $increment_end = TRUE;
          $date_only = TRUE;
        }
      }

      if ($date_only) {
        $rendered_fields['start'] = $start->format('Y-m-d');
      }
      else {
        $rendered_fields['start'] = $start->format('U') * 1000;
      }

      if ($end) {
        if ($date_only) {
          if ($increment_end) {
            $end->modify('+1 day');
          }
          $rendered_fields['end'] = $end->format('Y-m-d');
        }
        else {
          if ($increment_end) {
            $end->modify('+1 second');
          }
          $rendered_fields['end'] = $end->format('U') * 1000;
        }
      }
      break;

    case 'datestamp':
      $start = $raw_values[0]['value'];
      $end = FALSE;
      if (!empty($raw_values[0]['value2'])) {
        $end = $raw_values[0]['value2'];
        if ($start == $end) {
          $increment_end = TRUE;
        }
        $start_str = format_date($start, 'custom', 'Y-m-d H:i:s');
        $end_str = format_date($end, 'custom', 'Y-m-d H:i:s');
        if (date_is_all_day($start_str, $end_str)) {
          $increment_end = TRUE;
          $date_only = TRUE;
        }
      }

      if ($date_only) {
        $rendered_fields['start'] = format_date($start, 'custom', 'Y-m-d');
      }
      else {
        $rendered_fields['start'] = $start * 1000;
      }

      if ($end) {
        if ($date_only) {
          if ($increment_end) {
            $end = $end + 3600 * 24;
          }
          $rendered_fields['end'] = format_date($end, 'custom', 'Y-m-d');
        }
        else {
          if ($increment_end) {
            $end = $end + 1;
          }
          $rendered_fields['end'] = $end * 1000;
        }
      }
      break;

    case 'repeating_date':
      $start = $raw_values[0]['dtstart'];
      $end = $raw_values[0]['dtend'];
      if ($start == $end) {
        $increment_end = TRUE;
      }
      $start_str = format_date($start, 'custom', 'Y-m-d H:i:s');
      $end_str = format_date($end, 'custom', 'Y-m-d H:i:s');
      if (date_is_all_day($start_str, $end_str)) {
        $increment_end = TRUE;
        $date_only = TRUE;
      }

      if ($date_only) {
        $rendered_fields['start'] = format_date($start, 'custom', 'Y-m-d');
        if ($increment_end) {
          $end = $end + 3600 * 24;
        }
        $rendered_fields['end'] = format_date($end, 'custom', 'Y-m-d');
      }
      else {
        $rendered_fields['start'] = $start * 1000;
        if ($increment_end) {
          $end = $end + 1;
        }
        $rendered_fields['end'] = $end * 1000;
      }
      break;

    case 'resource_timeslot':
      $rendered_fields['start'] = $raw_values[0]['start'] * 1000;
      $rendered_fields['end'] = $raw_values[0]['end'] * 1000;
      break;
  }
}
